import { Client } from 'paho-mqtt';
import * as Observable from 'zen-observable';
import { AbstractPubSubProvider } from './PubSubProvider';
import { ProvidertOptions } from '../types';
export interface MqttProvidertOptions extends ProvidertOptions {
    clientId?: string;
    url?: string;
}
declare class ClientsQueue {
    private promises;
    get(clientId: string, clientFactory: (string: any) => Promise<Client>): Promise<Client>;
    readonly allClients: string[];
    remove(clientId: any): void;
}
export declare class MqttOverWSProvider extends AbstractPubSubProvider {
    private _clientsQueue;
    constructor(options?: MqttProvidertOptions);
    protected readonly clientId: any;
    protected readonly endpoint: any;
    protected readonly clientsQueue: ClientsQueue;
    protected getTopicForValue(value: any): any;
    getProviderName(): string;
    onDisconnect({ clientId, errorCode, ...args }: {
        [x: string]: any;
        clientId: any;
        errorCode: any;
    }): void;
    newClient({ url, clientId }: MqttProvidertOptions): Promise<Client>;
    protected connect(clientId: string, options?: MqttProvidertOptions): Promise<Client>;
    protected disconnect(clientId: string): Promise<void>;
    publish(topics: string[] | string, msg: any): Promise<void>;
    protected _topicObservers: Map<string, Set<ZenObservable.SubscriptionObserver<any>>>;
    private _onMessage;
    subscribe(topics: string[] | string, options?: MqttProvidertOptions): Observable<any>;
}
export {};
