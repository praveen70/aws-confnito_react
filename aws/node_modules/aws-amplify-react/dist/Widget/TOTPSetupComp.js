'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _core = require('@aws-amplify/core');

var _auth = require('@aws-amplify/auth');

var _auth2 = _interopRequireDefault(_auth);

var _AmplifyUITheme = require('../Amplify-UI/Amplify-UI-Theme');

var _AmplifyUITheme2 = _interopRequireDefault(_AmplifyUITheme);

var _AmplifyUIComponentsReact = require('../Amplify-UI/Amplify-UI-Components-React');

var _ui = require('@aws-amplify/ui');

var _qrcode = require('qrcode.react');

var _qrcode2 = _interopRequireDefault(_qrcode);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var logger = new _core.ConsoleLogger('TOTPSetupComp'); /*
                                                        * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
                                                        *
                                                        * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
                                                        * the License. A copy of the License is located at
                                                        *
                                                        *     http://aws.amazon.com/apache2.0/
                                                        *
                                                        * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
                                                        * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
                                                        * and limitations under the License.
                                                        */

var TOTPSetupComp = function (_Component) {
    (0, _inherits3.default)(TOTPSetupComp, _Component);

    function TOTPSetupComp(props) {
        (0, _classCallCheck3.default)(this, TOTPSetupComp);

        var _this = (0, _possibleConstructorReturn3.default)(this, (TOTPSetupComp.__proto__ || Object.getPrototypeOf(TOTPSetupComp)).call(this, props));

        _this.setup = _this.setup.bind(_this);
        _this.showSecretCode = _this.showSecretCode.bind(_this);
        _this.verifyTotpToken = _this.verifyTotpToken.bind(_this);
        _this.handleInputChange = _this.handleInputChange.bind(_this);
        _this.triggerTOTPEvent = _this.triggerTOTPEvent.bind(_this);

        _this.state = {
            code: null,
            setupMessage: null
        };
        return _this;
    }

    (0, _createClass3.default)(TOTPSetupComp, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.setup();
        }
    }, {
        key: 'triggerTOTPEvent',
        value: function triggerTOTPEvent(event, data, user) {
            if (this.props.onTOTPEvent) {
                this.props.onTOTPEvent(event, data, user);
            }
        }
    }, {
        key: 'handleInputChange',
        value: function handleInputChange(evt) {
            this.setState({ setupMessage: null });
            this.inputs = {};
            var _evt$target = evt.target,
                name = _evt$target.name,
                value = _evt$target.value,
                type = _evt$target.type,
                checked = _evt$target.checked;

            var check_type = ['radio', 'checkbox'].includes(type);
            this.inputs[name] = check_type ? checked : value;
        }
    }, {
        key: 'setup',
        value: function setup() {
            var _this2 = this;

            this.setState({ setupMessage: null });
            var user = this.props.authData;
            if (!_auth2.default || typeof _auth2.default.setupTOTP !== 'function') {
                throw new Error('No Auth module found, please ensure @aws-amplify/auth is imported');
            }

            _auth2.default.setupTOTP(user).then(function (data) {
                logger.debug('secret key', data);
                var code = "otpauth://totp/AWSCognito:" + user.username + "?secret=" + data + "&issuer=AWSCognito";
                _this2.setState({ code: code });
            }).catch(function (err) {
                return logger.debug('totp setup failed', err);
            });
        }
    }, {
        key: 'verifyTotpToken',
        value: function verifyTotpToken() {
            var _this3 = this;

            if (!this.inputs) {
                logger.debug('no input');
                return;
            }
            var user = this.props.authData;
            var totpCode = this.inputs.totpCode;

            if (!_auth2.default || typeof _auth2.default.verifyTotpToken !== 'function' || typeof _auth2.default.setPreferredMFA !== 'function') {
                throw new Error('No Auth module found, please ensure @aws-amplify/auth is imported');
            }
            _auth2.default.verifyTotpToken(user, totpCode).then(function () {
                // set it to preferred mfa
                _auth2.default.setPreferredMFA(user, 'TOTP');
                _this3.setState({ setupMessage: 'Setup TOTP successfully!' });
                logger.debug('set up totp success!');
                _this3.triggerTOTPEvent('Setup TOTP', 'SUCCESS', user);
            }).catch(function (err) {
                _this3.setState({ setupMessage: 'Setup TOTP failed!' });
                logger.error(err);
            });
        }
    }, {
        key: 'showSecretCode',
        value: function showSecretCode(code, theme) {
            if (!code) return null;
            return _react2.default.createElement(
                'div',
                null,
                _react2.default.createElement(
                    'div',
                    { className: _ui.totpQrcode },
                    _react2.default.createElement(_qrcode2.default, { value: code })
                ),
                _react2.default.createElement(
                    _AmplifyUIComponentsReact.InputLabel,
                    null,
                    _core.I18n.get('Enter Security Code:')
                ),
                _react2.default.createElement(_AmplifyUIComponentsReact.Input, {
                    autoFocus: true,
                    theme: theme,
                    key: 'totpCode',
                    name: 'totpCode',
                    onChange: this.handleInputChange
                })
            );
        }
    }, {
        key: 'render',
        value: function render() {
            var theme = this.props.theme ? this.props.theme : _AmplifyUITheme2.default;
            var code = this.state.code;

            return _react2.default.createElement(
                _AmplifyUIComponentsReact.FormSection,
                { theme: theme },
                this.state.setupMessage && _react2.default.createElement(
                    _AmplifyUIComponentsReact.Toast,
                    null,
                    _core.I18n.get(this.state.setupMessage)
                ),
                _react2.default.createElement(
                    _AmplifyUIComponentsReact.SectionHeader,
                    { theme: theme },
                    _core.I18n.get('Scan then enter verification code')
                ),
                _react2.default.createElement(
                    _AmplifyUIComponentsReact.SectionBody,
                    { theme: theme },
                    this.showSecretCode(code, theme),
                    this.state.setupMessage && _core.I18n.get(this.state.setupMessage)
                ),
                _react2.default.createElement(
                    _AmplifyUIComponentsReact.SectionFooter,
                    null,
                    _react2.default.createElement(
                        _AmplifyUIComponentsReact.Button,
                        { theme: theme, onClick: this.verifyTotpToken, style: { width: '100%' } },
                        _core.I18n.get('Verify Security Token')
                    )
                )
            );
        }
    }]);
    return TOTPSetupComp;
}(_react.Component);

exports.default = TOTPSetupComp;