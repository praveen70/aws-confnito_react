'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _core = require('@aws-amplify/core');

var _AmplifyTheme = require('../AmplifyTheme');

var _AmplifyTheme2 = _interopRequireDefault(_AmplifyTheme);

var _Picker = require('./Picker');

var _Picker2 = _interopRequireDefault(_Picker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */

var Container = {};

var PickerPreview = {
    maxWidth: '100%'
};

var logger = new _core.ConsoleLogger('TextPicker');

var TextPicker = function (_Component) {
    (0, _inherits3.default)(TextPicker, _Component);

    function TextPicker(props) {
        (0, _classCallCheck3.default)(this, TextPicker);

        var _this = (0, _possibleConstructorReturn3.default)(this, (TextPicker.__proto__ || Object.getPrototypeOf(TextPicker)).call(this, props));

        _this.handlePick = _this.handlePick.bind(_this);

        _this.state = {
            previewText: props.previewText
        };
        return _this;
    }

    (0, _createClass3.default)(TextPicker, [{
        key: 'handlePick',
        value: function handlePick(data) {
            var that = this;
            var file = data.file,
                name = data.name,
                size = data.size,
                type = data.type;
            var _props = this.props,
                preview = _props.preview,
                onPick = _props.onPick,
                onLoad = _props.onLoad;


            if (onPick) {
                onPick(data);
            }

            if (preview) {
                var reader = new FileReader();
                reader.onload = function (e) {
                    var text = e.target.result;
                    that.setState({ previewText: text });
                    if (onLoad) {
                        onLoad(text);
                    }
                };
                reader.readAsText(file);
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var preview = this.props.preview;
            var previewText = this.state.previewText;


            var title = this.props.title || 'Pick a File';

            var theme = this.props.theme || _AmplifyTheme2.default;
            var containerStyle = Object.assign({}, Container, theme.picker);
            var previewStyle = Object.assign({}, PickerPreview, theme.pickerPreview, theme.halfHeight, preview && preview !== 'hidden' ? {} : _AmplifyTheme2.default.hidden);

            return _react2.default.createElement(
                'div',
                { style: containerStyle },
                previewText ? _react2.default.createElement(
                    'div',
                    { style: previewStyle },
                    _react2.default.createElement(
                        'pre',
                        { style: theme.pre },
                        previewText
                    )
                ) : null,
                _react2.default.createElement(_Picker2.default, {
                    title: title,
                    accept: 'text/*',
                    theme: theme,
                    onPick: this.handlePick
                })
            );
        }
    }]);
    return TextPicker;
}(_react.Component);

exports.default = TextPicker;